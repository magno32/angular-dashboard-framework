{"version":3,"sources":["adf.js","column.js","dashboard.js","provider.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js"],"names":["angular","module","value","directive","$log","$compile","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","findWidget","index","widget","i","length","w","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","parseInt","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","adfModel","collapsible","templateUrl","link","col","isDefined","isArray","cloned","append","$rootScope","$modal","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","transclude","name","editable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","error","title","editClass","toggleEditMode","modelCopy","$broadcast","cancelEditMode","editDashboardDialog","editDashboardScope","$new","instance","open","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","opts","addWidget","unshift","compile","$attrs","$attr","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","edit","path","template","$get","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","$on","stringToBoolean","string","toLowerCase","Boolean","preLink","definition","fromJson","isCollapsed","debug","postLink","remove","editScope","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" collapsible=\"collapsible\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" collapsible=\"collapsible\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (w.wid === index){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if ( c.cid === index ){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? parseInt(id) : -1;\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.glyphicon-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        sortable.destroy();\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        adfModel: '=',\r\n        collapsible: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $modal, dashboard, adfTemplatePath) {\r\n    'use strict';\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = {};\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n    \t\t  if ($scope.editMode){\r\n            $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n    \t\t  }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n\t\t      $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n          var instance = $modal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfTemplatePath + 'dashboard-edit.html'\r\n          });\r\n          $scope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfTemplatePath + 'widget-add.html'\r\n          };\r\n          var instance = $modal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addScope.model.rows[0].columns[0].widgets.unshift(w);\r\n            instance.close();\r\n\r\n            addScope.$destroy();\r\n          };\r\n          addScope.closeDialog = function(){\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function($element, $attrs){\r\n        if (!angular.isDefined($attrs.editable)){\r\n          $attrs.editable = true;\r\n        }\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass attributes to scope\r\n        $scope.name = $attr.name;\r\n        $scope.structure = $attr.structure;\r\n        $scope.editable = $attr.editable;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {reload: true};\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc object\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        id: function(){\r\n          return ++cid;\r\n        }\r\n      };\r\n    };\r\n\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        collapsible: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function ($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n    $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url){\r\n      var parsedUrl = url;\r\n      if ( url.indexOf('{widgetsPath}') >= 0 ){\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                       .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0){\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if ( widget.template ){\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl){\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n            .success(function(response){\r\n              // put response to cache, with unmodified url as key\r\n              $templateCache.put(widget.templateUrl, response);\r\n              deferred.resolve(response);\r\n            })\r\n            .error(function(){\r\n              deferred.reject('could not load template');\r\n            });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs){\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope){\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function(){\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($log, $modal, dashboard, adfTemplatePath) {\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function preLink($scope){\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title){\r\n            definition.title = w.title;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid){\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // convert collapsible to string\r\n          $scope.collapsible = stringToBoolean($scope.collapsible);\r\n\r\n          // collapse\r\n          $scope.isCollapsed = false;\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n        $scope.close = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function(){\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfTemplatePath + 'widget-edit.html'\r\n          };\r\n\r\n          var instance = $modal.open(opts);\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n\r\n            var widget = $scope.widget;\r\n            if (widget.edit && widget.edit.reload){\r\n              // reload content after edit dialog is closed\r\n              $scope.$broadcast('widgetConfigChanged');\r\n            }\r\n          };\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        collapsible: '='\r\n      },\r\n      compile: function compile(){\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n","angular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode collapsible=collapsible>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model collapsible=collapsible ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end=\\\"\\\" ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} class=\\\"widget panel panel-default\\\"> <div class=\\\"panel-heading clearfix\\\"> <h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"collapsible && !isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"collapsible && isCollapsed\\\" ng-click=\\\"isCollapsed = !isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=close() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> </div> <div class=panel-body collapse=isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> </div> \");}]);"],"sourceRoot":"/source/"}